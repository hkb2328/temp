# Databricks-native Embedding RAG (no huggingface)
from databricks.vector_search.client import VectorSearchClient
from databricks.sdk import WorkspaceClient
from pyspark.sql import functions as F, types as T

spark = SparkSession.builder.getOrCreate()
w = WorkspaceClient()

CATALOG = "your_catalog"
GOLD_SCHEMA = "gold"
GOLD_TABLE = f"{CATALOG}.{GOLD_SCHEMA}.pdf_gold"
INDEX_NAME = f"{CATALOG}.{GOLD_SCHEMA}.pdf_gold_index"
ENDPOINT_NAME = "pdf_rag_vs_endpoint"
EMBEDDING_MODEL = "databricks-bge-large-en"  # Databricks-managed model

# ---------------------------------------------------------
# Step 1: Generate embeddings using Databricks model serving
# ---------------------------------------------------------
from databricks.sdk.runtime import *  # provides `serving_endpoint_request`

@F.udf(T.ArrayType(T.FloatType()))
def get_embedding_udf(text: str):
    if text is None or text.strip() == "":
        return []
    response = serving_endpoint_request(
        name=EMBEDDING_MODEL,
        data={"input": [text]},
    )
    return response["data"][0]["embedding"]

silver_df = spark.table(f"{CATALOG}.silver.pdf_silver")

gold_df = silver_df.withColumn("embedding", get_embedding_udf(F.col("chunk_text")))

(gold_df.write
    .format("delta")
    .mode("overwrite")
    .option("overwriteSchema", "true")
    .saveAsTable(GOLD_TABLE))

print(f"Gold table {GOLD_TABLE} created with Databricks embeddings")

# ---------------------------------------------------------
# Step 2: Create vector search index (Delta Sync)
# ---------------------------------------------------------
client = VectorSearchClient()

# create endpoint if not exists
try:
    client.get_endpoint(ENDPOINT_NAME)
except:
    client.create_endpoint(ENDPOINT_NAME)

client.create_delta_sync_index(
    endpoint_name=ENDPOINT_NAME,
    source_table_name=GOLD_TABLE,
    index_name=INDEX_NAME,
    primary_key="doc_chunk_id",
    embedding_vector_column="embedding",
    embedding_dimension=1024,  # databricks-bge-large-en output
    pipeline_type="TRIGGERED"
)

print(f"Index {INDEX_NAME} created successfully")
